service: web-api

custom:
  secrets: ${file(secrets.json)}

provider:
  name: aws
  region: ${self:custom.secrets.REGION}
  runtime: nodejs8.10
  timeout: 30
  stage: ${self:custom.secrets.NODE_ENV}
  environment:
    DB_HOST: ${self:custom.secrets.DB_HOST}
    DB_NAME: ${self:custom.secrets.DB_NAME}
    DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
    DB_PORT: ${self:custom.secrets.DB_PORT}
    DB_USER: ${self:custom.secrets.DB_USER}
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
  vpc:
    securityGroupIds:
      - ${self:custom.secrets.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:custom.secrets.SUBNET1_ID}
      - ${self:custom.secrets.SUBNET2_ID}

functions:
  healthCheck:
    handler: handler.healthCheck
    events:
      - http:
          path: /
          method: get
          cors: true
  noteCreate:
    handler: handler.noteCreate
    events:
      - http:
          path: notes
          method: post
          cors: true
  noteGetOne:
    handler: handler.noteGetOne
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
  noteGetAll:
    handler: handler.noteGetAll
    events:
      - http:
          path: notes
          method: get
          cors: true
  noteUpdate:
    handler: handler.noteUpdate
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
  noteDestroy:
    handler: handler.noteDestroy
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
  tagCreate:
    handler: handler.tagCreate
    events:
      - http:
          path: tags
          method: post
          cors: true
  tagGetOne:
    handler: handler.tagGetOne
    events:
      - http:
          path: tags/{id}
          method: get
          cors: true
  tagGetAll:
    handler: handler.tagGetAll
    events:
      - http:
          path: tags
          method: get
          cors: true
  tagUpdate:
    handler: handler.tagUpdate
    events:
      - http:
          path: tags/{id}
          method: put
          cors: true
  tagDestroy:
    handler: handler.tagDestroy
    events:
      - http:
          path: tags/{id}
          method: delete
          cors: true
  tagRelationCreate:
    handler: handler.tagRelationCreate
    events:
      - http:
          path: tagRelations
          method: post
          cors: true
  tagRelationGetOne:
    handler: handler.tagRelationGetOne
    events:
      - http:
          path: tagRelations/{id}
          method: get
          cors: true
  tagRelationGetAll:
    handler: handler.tagRelationGetAll
    events:
      - http:
          path: tagRelations
          method: get
          cors: true
  tagRelationUpdate:
    handler: handler.tagRelationUpdate
    events:
      - http:
          path: tagRelations/{id}
          method: put
          cors: true
  tagRelationDestroy:
    handler: handler.tagRelationDestroy
    events:
      - http:
          path: tagRelations/{id}
          method: delete
          cors: true
  collectionCreate:
    handler: handler.collectionCreate
    events:
      - http:
          path: collections
          method: post
          cors: true
  collectionGetOne:
    handler: handler.collectionGetOne
    events:
      - http:
          path: collections/{id}
          method: get
          cors: true
  collectionGetAll:
    handler: handler.collectionGetAll
    events:
      - http:
          path: collections
          method: get
          cors: true
  collectionUpdate:
    handler: handler.collectionUpdate
    events:
      - http:
          path: collections/{id}
          method: put
          cors: true
  collectionDestroy:
    handler: handler.collectionDestroy
    events:
      - http:
          path: collections/{id}
          method: delete
          cors: true

plugins:
  - serverless-offline
