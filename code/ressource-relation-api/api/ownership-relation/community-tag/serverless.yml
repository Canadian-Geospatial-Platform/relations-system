service: ${env:API_NAME}-own-rel-com-tag

custom:
  dotenv:
    path: ../../../.env

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  region: ${env:REGION}
  runtime: nodejs12.x
  timeout: 30
  stage: ${env:NODE_ENV}
  versionFunctions: false
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET1_ID}
      - ${env:SUBNET2_ID}

package:
  individually: true

functions:
  communityTagOwnershipRelationCreate:
    handler: ../handler.ownershipRelationCreate
    events:
      - http:
          path: communityTagOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "CommunityTagOwnershipRelation"
  communityTagOwnershipRelationGetOne:
    handler: ../handler.ownershipRelationGetOne
    events:
      - http:
          path: communityTagOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "CommunityTagOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "TagId"
  communityTagOwnershipRelationGetAll:
    handler: ../handler.ownershipRelationGetAll
    events:
      - http:
          path: communityTagOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "CommunityTagOwnershipRelation"
  communityTagOwnershipRelationUpdate:
    handler: ../handler.ownershipRelationUpdate
    events:
      - http:
          path: communityTagOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "CommunityTagOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "TagId"
  communityTagOwnershipRelationDestroy:
    handler: ../handler.ownershipRelationDestroy
    events:
      - http:
          path: communityTagOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "CommunityTagOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "TagId"
