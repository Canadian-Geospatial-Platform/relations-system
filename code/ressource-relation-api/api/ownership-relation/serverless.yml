service: ${env:API_NAME}-collection

custom:
  dotenv:
    path: ../../.env
  webpack:
    webpackConfig: ../../webpack.config.js
    includeModules: false

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  region: ${env:REGION}
  runtime: nodejs12.x
  timeout: 30
  stage: ${env:NODE_ENV}
  versionFunctions: false
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET1_ID}
      - ${env:SUBNET2_ID}

package:
  individually: true

functions:
  # userCommunityOwnership
  userCommunityOwnershipRelationCreate:
    handler: handler.ownershipRelationCreate
    events:
      - http:
          path: userCommunityOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "UserCommunityOwnershipRelation"
  userCommunityOwnershipRelationGetOne:
    handler: handler.ownershipRelationGetOne
    events:
      - http:
          path: userCommunityOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserCommunityOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CommunityId"
  userCommunityOwnershipRelationGetAll:
    handler: handler.ownershipRelationGetAll
    events:
      - http:
          path: userCommunityOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserCommunityOwnershipRelation"
  userCommunityOwnershipRelationUpdate:
    handler: handler.ownershipRelationUpdate
    events:
      - http:
          path: userCommunityOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "UserCommunityOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CommunityId"
  userCommunityOwnershipRelationDestroy:
    handler: handler.ownershipRelationDestroy
    events:
      - http:
          path: userCommunityOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "UserCommunityOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CommunityId"
  # userResource
  userResourceOwnershipRelationCreate:
    handler: handler.ownershipRelationCreate
    events:
      - http:
          path: userResourceOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "UserResourceOwnershipRelation"
  userResourceOwnershipRelationGetOne:
    handler: handler.ownershipRelationGetOne
    events:
      - http:
          path: userResourceOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserResourceOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "ResourceId"
  userResourceOwnershipRelationGetAll:
    handler: handler.ownershipRelationGetAll
    events:
      - http:
          path: userResourceOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserResourceOwnershipRelation"
  userResourceOwnershipRelationUpdate:
    handler: handler.ownershipRelationUpdate
    events:
      - http:
          path: userResourceOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "UserResourceOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "ResourceId"
  userResourceOwnershipRelationDestroy:
    handler: handler.ownershipRelationDestroy
    events:
      - http:
          path: userResourceOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "UserResourceOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "ResourceId"
  # userTag
  userTagOwnershipRelationCreate:
    handler: handler.ownershipRelationCreate
    events:
      - http:
          path: userTagOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "UserTagOwnershipRelation"
  userTagOwnershipRelationGetOne:
    handler: handler.ownershipRelationGetOne
    events:
      - http:
          path: userTagOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserTagOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "TagId"
  userTagOwnershipRelationGetAll:
    handler: handler.ownershipRelationGetAll
    events:
      - http:
          path: userTagOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserTagOwnershipRelation"
  userTagOwnershipRelationUpdate:
    handler: handler.ownershipRelationUpdate
    events:
      - http:
          path: userTagOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "UserTagOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "TagId"
  userTagOwnershipRelationDestroy:
    handler: handler.ownershipRelationDestroy
    events:
      - http:
          path: userTagOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "UserTagOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "TagId"
  # userCollection
  userCollectionOwnershipRelationCreate:
    handler: handler.ownershipRelationCreate
    events:
      - http:
          path: userCollectionOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "UserCollectionOwnershipRelation"
  userCollectionOwnershipRelationGetOne:
    handler: handler.ownershipRelationGetOne
    events:
      - http:
          path: userCollectionOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserCollectionOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CollectionId"
  userCollectionOwnershipRelationGetAll:
    handler: handler.ownershipRelationGetAll
    events:
      - http:
          path: userCollectionOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "UserCollectionOwnershipRelation"
  userCollectionOwnershipRelationUpdate:
    handler: handler.ownershipRelationUpdate
    events:
      - http:
          path: userCollectionOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "UserCollectionOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CollectionId"
  userCollectionOwnershipRelationDestroy:
    handler: handler.ownershipRelationDestroy
    events:
      - http:
          path: userCollectionOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "UserCollectionOwnershipRelation"
      FK_NAME_1: "UserId"
      FK_NAME_2: "CollectionId"

  ###

  communityCollectionOwnershipRelationCreate:
    handler: handler.ownershipRelationCreate
    events:
      - http:
          path: communityCollectionOwnershipRelations
          method: post
          cors: true
    environment:
      TABLE_NAME: "CommunityCollectionOwnershipRelation"
  communityCollectionOwnershipRelationGetOne:
    handler: handler.ownershipRelationGetOne
    events:
      - http:
          path: communityCollectionOwnershipRelations/{id1}/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "CommunityCollectionOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "CollectionId"
  communityCollectionOwnershipRelationGetAll:
    handler: handler.ownershipRelationGetAll
    events:
      - http:
          path: communityCollectionOwnershipRelations
          method: get
          cors: true
    environment:
      TABLE_NAME: "CommunityCollectionOwnershipRelation"
  communityCollectionOwnershipRelationUpdate:
    handler: handler.ownershipRelationUpdate
    events:
      - http:
          path: communityCollectionOwnershipRelations/{id1}/{id2}
          method: put
          cors: true
    environment:
      TABLE_NAME: "CommunityCollectionOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "CollectionId"
  communityCollectionOwnershipRelationDestroy:
    handler: handler.ownershipRelationDestroy
    events:
      - http:
          path: communityCollectionOwnershipRelations/{id1}/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "CommunityCollectionOwnershipRelation"
      FK_NAME_1: "CommunityId"
      FK_NAME_2: "CollectionId"
