service: ${env:API_NAME}-rel-con-tag-col

custom:
  dotenv:
    path: ../../../.env

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-bundle

provider:
  name: aws
  region: ${env:REGION}
  runtime: nodejs12.x
  timeout: 30
  stage: ${env:NODE_ENV}
  versionFunctions: false
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET1_ID}
      - ${env:SUBNET2_ID}

package:
  individually: true

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: relations/containers/tag/collection
          method: post
          cors: true
    environment:
      TABLE_NAME: "TagCollectionRelation"
  getOne:
    handler: handler.getOne
    events:
      - http:
          path: relations/containers/tag/{id1}/collection/{id2}
          method: get
          cors: true
    environment:
      TABLE_NAME: "TagCollectionRelation"
      FK_NAME_1: "TagId"
      FK_NAME_2: "CollectionId"
  getAll:
    handler: handler.getAll
    events:
      - http:
          path: relations/containers/tag/collection
          method: get
          cors: true
    environment:
      TABLE_NAME: "TagCollectionRelation"
  update:
    handler: handler.update
    events:
      - http:
          path: relations/containers/tag/{id1}/collection/{id2}
          method: patch
          cors: true
    environment:
      TABLE_NAME: "TagCollectionRelation"
      FK_NAME_1: "TagId"
      FK_NAME_2: "CollectionId"
  destroy:
    handler: handler.destroy
    events:
      - http:
          path: relations/containers/tag/{id1}/collection/{id2}
          method: delete
          cors: true
    environment:
      TABLE_NAME: "TagCollectionRelation"
      FK_NAME_1: "TagId"
      FK_NAME_2: "CollectionId"
